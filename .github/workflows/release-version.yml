on:
  workflow_call:
    inputs:
      level:
        description: 'The level of the release, see cargo-release doc for more info'
        default: 'alpha'
        required: true
        type: string
      merge_changelog:
        description: 'Merge the changelog into the release body'
        default: false
        required: false
        type: boolean
      toolchain:
        description: 'The rust toolchain use to release the project'
        default: 'stable'
        required: false
        type: string
      ref:
        description: 'The ref to use to checkout the project'
        default: '${{ github.ref }}'
        required: false
        type: string
    secrets:
      CRATE_RELEASE_TOKEN:
        description: 'A token to publish the crate'
        required: true
      GITHUB_RELEASE_TOKEN:
        description: 'A github personal token to push release commit to the repo and create github release note'
        required: true

permissions:
  contents: write

env: 
  CARGO_TERM_COLOR: always
  CHANGELOG: ''
  TAG_NAME: 'Waiting to release'
  PRERELEASE: ${{ inputs.level == 'alpha' || inputs.level == 'beta' || inputs.level == 'rc' }}

name: "Publish new version"
jobs:
  release:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_RELEASE_TOKEN }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ inputs.toolchain }}
      - name: Install cargo-release & rclog
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-release, rclog
      - name: git config
        run: |
          git config --global user.name "RChangelog[bot]"
          git config --global user.email 155627257+RChangelog[bot]@users.noreply.github.com
      - name: cargo login
        run: cargo login ${{ secrets.CRATE_RELEASE_TOKEN }}
      - name: Run cargo release to publish
        run: |
          cargo release ${{inputs.level}} --execute --no-confirm --no-push

          echo "TAG_NAME=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          version=$(git describe --tags --abbrev=0 | grep -oP '(?<=v)\S*')
          
          if [ "${{ inputs.merge_changelog }}" = true ]; then
            echo "Replace changelog"
            echo "$(rclog -t ${version} -p ./CHANGELOG.md merge)" >| ./CHANGELOG.md
            git add CHANGELOG.md
            git commit --amend --no-edit
          fi

          git push --follow-tags
          echo "VERSION=$version" >> $GITHUB_ENV
          
          echo "Extract changelog..."
          
          changelog=$(rclog -t ${version} -p ./CHANGELOG.md extract || true)
          if [ -z "${changelog}" ]; then
            {
              echo 'CHANGELOG<<delimiter-for-changelog' 
              echo $changelog
              echo 'delimiter-for-changelog'
            } >> $GITHUB_ENV
          fi
          
          
      - name: Github release notes
        if : ${{ env.CHANGELOG != ''  }}
        uses: ncipollo/release-action@v1
        with:
          prerelease: ${{ env.PRERELEASE }}
          body: ${{ env.CHANGELOG }}
          tag: ${{ env.TAG_NAME }}
          token: ${{ secrets.GITHUB_RELEASE_TOKEN }}